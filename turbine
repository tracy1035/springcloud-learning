断路器指标数据监控Hystrix Dashboard 和 Turbine
1. Hystrix Dashboard (断路器：hystrix 仪表盘) 
Hystrix一个很重要的功能是，可以通过HystrixCommand收集相关数据指标. Hystrix Dashboard可以很高效的现实每个断路器的健康状况。
1）. 在Ribbon服务g和Feign服务的Maven工程的pom.xml中都加入依赖
<!-- 微服务系统健康监控工具 -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <!-- dashboard 仪表盘 -->
    <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-hystrix-dashboard</artifactId>
    </dependency>
</dependencies>
2）在Spring Boot启动类上用@EnableHystrixDashboard注解和@EnableCircuitBreaker注解。
@EnableDiscoveryClient
@SpringBootApplication
@EnableFeignClients
//加入断路由注解
@EnableCircuitBreaker
//Hystrix仪表盘
@EnableHystrixDashboard
public class Application {
    public static void main(String[] args) {
       // new SpringApplicationBuilder(Application.class).web(true).run(args);
        SpringApplication.run(Application.class, args);
    }
}
3）然后就可以访问/hystrix，这个URL将dashboard指向定义在Hystrix客户端应用中的/hystrix.stream
 

 

2. 利用Turbine在一个Dashboard上监控多个流
以上例子只能监控一个，要同时监控多个流怎么办？ 
答案是， 可以单独做一个Turbine服务，专门监控所有断路器状态，从而掌握整个系统中所有微服务的状态。下面我们就来创建一个Turbine服务，来监控我们之前做的Feign服务和Ribbon服务

1）.  创建一个maven工程， 在pox.xml添加以下依赖
<!--turbine 所需要的jar依赖   -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-actuator</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-hystrix-dashboard</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-turbine</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-netflix-turbine</artifactId>
</dependency>

2）. 创建Turbine Dashboard启动类: 
用@EnableHystrixDashboard和@EnableTurbine修饰主类， 分别用于支持Hystrix Dashboard和Turbine
@SpringBootApplication
@EnableHystrixDashboard
@EnableTurbine
public class DashboardApplication {
    public static void mian(String[] args ){
        SpringApplication.run(DashboardApplication.class);
    }
}
3). 在application.yml中配置turbine参数
eureka:
  client:
    serviceUrl:
        defaultZone: http://localhost:8761/eureka/

server:
    port: 8903

spring:
    application:
        name: hystrix-dashboard-turbine
        
turbine:
    appConfig: service-feign, service-ribbon
    aggregator:
        clusterConfig: default
    clusterNameExpression: new String("default")
turbine.appConfig定义了要监控的服务，这里是我们在前面章节创建的service-feign和sercice-ribbon; aggregator.clusterConfig定义了聚合方式， 此处为default.
turbine.appConfig ：配置Eureka中的serviceId列表，表明监控哪些服务
turbine.aggregator.clusterConfig ：指定聚合哪些集群，多个使用”,”分割，默认为default。可使用http://.../turbine.stream?cluster={clusterConfig之一}访问
turbine.clusterNameExpression ：指定集群名称，可以是三种类型的值
         - 默认表达式为appName；此时turbine.aggregator.clusterConfig需要配置想要监控的应用名称；
         - 当为default时，turbine.aggregator.clusterConfig可以不写，因为默认就是default；
         - 当为metadata[‘cluster’]时，假设想要监控的应用配置了eureka.instance.metadata-map.cluster: ABC，则需要配置，同时turbine.aggregator.clusterConfig: ABC
4）. 依次启动eureka服务， 2个Helloworld服务， Feign服务，ribbon服务和刚创建turbine服务。从eureka服务中我们可以看到
 

